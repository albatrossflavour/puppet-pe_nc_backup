#!/opt/puppetlabs/puppet/bin/ruby
#
# Calls ncio to backup the node classifier, and updates a git repo with changes.
#
# The destination backup directory must exist.
#
# Warning: Previous backups (if any) in the destination directory will be overwritten!
#
# Author: Jesse Reynolds - Puppet, Inc. - jesse.reynolds@puppet.com

require 'logger'
require 'open3'
require 'time'

def log(logger, severity, message)
  puts "#{severity.to_s.upcase} - #{message}"
  case severity
  when :info
    logger.info(message)
  when :warn
    logger.warn(message)
  when :error
    logger.error(message)
  end
end

my_dir   = ARGV[0]
failures = 0
thefile  = 'node_groups.json'

unless my_dir && my_dir != ''
  puts "No backup directory specified, using /pe_nc_backup"
  my_dir = '/pe_nc_backup'
end

unless File.directory?(my_dir)
  raise "Directory does not exist at #{my_dir}"
end

logfile = File.join(my_dir, 'pe_nc_backup.log')
logger  = Logger.new(logfile, 10, 1024000)
log(logger, :info, "pe_nc_backup started at #{Time.now}")

repo_dir = File.join(my_dir, 'repo')
unless File.directory?(repo_dir)
  puts "Creating repo dir at #{repo_dir}"
  Dir.mkdir(repo_dir)
end

timestamp = Time.now().iso8601
cmd       = "/opt/puppetlabs/puppet/bin/ncio backup > #{repo_dir}/#{thefile}"

Open3.popen2e(cmd) do |stdin, stdout_err, wait_thr|
  while line = stdout_err.gets
    log(logger, :info, line)
  end

  exit_status = wait_thr.value
  if exit_status.success?
    log(logger, :info, "Node groups backed up successfully.")
  else
    log(logger, :error, "Node groups backup has failed! ncio: #{exit_status}.")
    failures += 1
  end
end

# update git:

Dir.chdir(repo_dir)

if system('git status --porcelain')

  # TODO: if the origin remote exists, try a pull from it (errors are non-fatal)

  unless system("git add #{thefile}")
    logger.error "Unable to git add #{thefile}: #{$?}"
    failures += 1
  end

  if `git status --porcelain #{thefile}` =~ /^\s*M/
    hostname  = `hostname -f`
    unless system("git commit -m 'Update node groups by pe_nc_backup on #{hostname} at #{timestamp}'")
      logger.error "Unable to make git commit: #{$?}"
    end
  end

  # TODO: if there is an origin remote, try pushing to it

else

  log(logger, :error, "This does not appear to be a git repo here at #{Dir.pwd}")
  failures += 1
end

log(logger, :info, "Backup script complete at #{Time.now}")
if failures > 0
  logger.error "Errors (#{failures}) were encountered backing up Puppet Enterprise"
  exit 1
end

